{"version":3,"sources":["../../../src/renderer/controllers/files_controller.js"],"names":["openFileItemContextMenu","require","remote","Menu","MenuItem","handlers","openAvailableFileItemContextMenu","canNew","chooseFile","callbacks","menu","append","label","click","newFile","type","moveToNotebook","copyToNotebook","normalExport","exportAsPdf","deleteFile","popup","getCurrentWindow","openUnavailableFileItemContextMenu","clearFile","restoreFile","clearTrash","available","availableDic"],"mappings":"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","file":"files_controller.js","sourcesContent":["const {remote} = require('electron')\nconst {Menu, MenuItem} = remote\n\nvar handlers = {};\n\nhandlers.openAvailableFileItemContextMenu = function (canNew, chooseFile, callbacks) {\n  const menu = new Menu();\n  if(!canNew && !chooseFile)\n    return;\n  if(canNew) {\n    menu.append(new MenuItem({label: 'New Note', click() { callbacks.newFile(); }}));\n    // todo, not now\n    // menu.append(new MenuItem({label: 'Import...', click() { callbacks.importFile(); }}));\n  }\n  if(chooseFile) {\n    menu.append(new MenuItem({type: 'separator'}));\n    menu.append(new MenuItem({label: 'Move To Notebook...', click() { callbacks.moveToNotebook(); }}));\n    menu.append(new MenuItem({label: 'Copy To Notebook...', click() { callbacks.copyToNotebook(); }}));\n    menu.append(new MenuItem({type: 'separator'}));\n    menu.append(new MenuItem({label: 'Export...', click() { callbacks.normalExport(); }}));\n    menu.append(new MenuItem({label: 'Export As Pdf...', click() { callbacks.exportAsPdf(); }}));\n    menu.append(new MenuItem({type: 'separator'}));\n    menu.append(new MenuItem({label: 'Move To Trash...', click() { callbacks.deleteFile(); }}));\n  }\n  menu.popup(remote.getCurrentWindow());\n}\n\nhandlers.openUnavailableFileItemContextMenu = function (canNew, chooseFile, callbacks) {\n  const menu = new Menu();\n  if(chooseFile) {\n    menu.append(new MenuItem({label: 'Delete Forever...', click() { callbacks.clearFile(); }}));\n    menu.append(new MenuItem({label: 'Restore...', click() { callbacks.restoreFile(); }}));\n    menu.append(new MenuItem({type: 'separator'}));\n    menu.append(new MenuItem({label: 'Empty Trash...', click() { callbacks.clearTrash(); }}));\n  }else{\n    menu.append(new MenuItem({label: 'Empty Trash...', click() { callbacks.clearTrash(); }}));\n  }\n  menu.popup(remote.getCurrentWindow());\n}\n\n// canNew checkIf can new a file\n// chooseFile checkIf choose a file\nexport function openFileItemContextMenu (available, canNew, chooseFile, callbacks) {\n  let availableDic = {\n    'false': 'openUnavailableFileItemContextMenu',\n    'true': 'openAvailableFileItemContextMenu'\n  };\n  handlers[availableDic[available]](canNew, chooseFile, callbacks);\n}\n"]}