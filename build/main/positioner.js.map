{"version":3,"sources":["../../src/main/positioner.js"],"names":["Positioner","browserWindow","electronScreen","require","screen","position","trayPosition","screenSize","_getScreenSize","windowSize","_getWindowSize","undefined","positions","trayLeft","x","Math","floor","y","trayBottomLeft","height","trayRight","width","trayBottomRight","trayCenter","trayBottomCenter","topLeft","topRight","bottomLeft","bottomRight","topCenter","bottomCenter","center","substr","getSize","getDisplayNearestPoint","getCursorScreenPoint","workArea","trayPos","coords","_getCoords","setPosition"],"mappings":"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","file":"positioner.js","sourcesContent":["'use strict'\n\nclass Positioner {\n  constructor (browserWindow) {\n    this.browserWindow = browserWindow\n    this.electronScreen = require('electron').screen\n  }\n\n  _getCoords (position, trayPosition) {\n    let screenSize = this._getScreenSize()\n    let windowSize = this._getWindowSize()\n\n    if (trayPosition === undefined) trayPosition = {}\n\n    // Positions\n    let positions = {\n      trayLeft: {\n        x: Math.floor(trayPosition.x),\n        y: screenSize.y\n      },\n      trayBottomLeft: {\n        x: Math.floor(trayPosition.x),\n        y: Math.floor(screenSize.height - (windowSize[1] - screenSize.y))\n      },\n      trayRight: {\n        x: Math.floor(trayPosition.x - (windowSize[0]) + trayPosition.width),\n        y: screenSize.y\n      },\n      trayBottomRight: {\n        x: Math.floor(trayPosition.x - (windowSize[0]) + trayPosition.width),\n        y: Math.floor(screenSize.height - (windowSize[1] - screenSize.y))\n      },\n      trayCenter: {\n        x: Math.floor(trayPosition.x - ((windowSize[0] / 2)) + (trayPosition.width / 2)),\n        y: screenSize.y\n      },\n      trayBottomCenter: {\n        x: Math.floor(trayPosition.x - ((windowSize[0] / 2)) + (trayPosition.width / 2)),\n        y: Math.floor(screenSize.height - (windowSize[1] - screenSize.y))\n      },\n      topLeft: {\n        x: screenSize.x,\n        y: screenSize.y\n      },\n      topRight: {\n        x: Math.floor(screenSize.x + (screenSize.width - windowSize[0])),\n        y: screenSize.y\n      },\n      bottomLeft: {\n        x: screenSize.x,\n        y: Math.floor(screenSize.height - (windowSize[1] - screenSize.y))\n      },\n      bottomRight: {\n        x: Math.floor(screenSize.x + (screenSize.width - windowSize[0])),\n        y: Math.floor(screenSize.height - (windowSize[1] - screenSize.y))\n      },\n      topCenter: {\n        x: Math.floor(screenSize.x + ((screenSize.width / 2) - (windowSize[0] / 2))),\n        y: screenSize.y\n      },\n      bottomCenter: {\n        x: Math.floor(screenSize.x + ((screenSize.width / 2) - (windowSize[0] / 2))),\n        y: Math.floor(screenSize.height - (windowSize[1] - screenSize.y))\n      },\n      center: {\n        x: Math.floor(screenSize.x + ((screenSize.width / 2) - (windowSize[0] / 2))),\n        y: Math.floor(((screenSize.height + screenSize.y) / 2) - (windowSize[1] / 2))\n      }\n    }\n\n    // Default to right if the window is bigger than the space left.\n    // Because on Windows the window might get out of bounds and dissappear.\n    if (position.substr(0, 4) === 'tray') {\n      if ((positions[position].x + windowSize[0]) > (screenSize.width + screenSize.x)) {\n        return {\n          x: positions['topRight'].x,\n          y: positions[position].y\n        }\n      }\n    }\n\n    return positions[position]\n  }\n\n  _getWindowSize () {\n    return this.browserWindow.getSize()\n  }\n\n  _getScreenSize () {\n    return this.electronScreen.getDisplayNearestPoint(this.electronScreen.getCursorScreenPoint()).workArea\n  }\n\n  move (position, trayPos) {\n    // Get positions coords\n    var coords = this._getCoords(position, trayPos)\n\n    // Set the windows position\n    this.browserWindow.setPosition(coords.x, coords.y)\n  }\n\n  calculate (position, trayPos) {\n    // Get positions coords\n    var coords = this._getCoords(position, trayPos)\n\n    return {\n      x: coords.x,\n      y: coords.y\n    }\n  }\n}\n\n\nexport default Positioner;\n"]}